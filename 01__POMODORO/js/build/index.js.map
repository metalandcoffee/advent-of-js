{"version":3,"file":"index.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;;;;;;;;;;;;;;ACfe;AACf;AACA;AACA;AACA;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACO;AACP;AACA;;;;;;;;;;;;;;ACZe;AACf;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;ACZA,wBAAwB,2BAA2B,2EAA2E,kCAAkC,wBAAwB,OAAO,kCAAkC,mIAAmI;;AAE1T;AACI;AACN;AACiB;AACN;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACe;AACf,EAAE,sEAAY;AACd;AACA,+BAA+B,mEAAS;AACxC,iCAAiC,mEAAS;AAC1C,+BAA+B,mEAAS;AACxC,6BAA6B,mEAAS;AACtC,+BAA+B,mEAAS;AACxC,mCAAmC,mEAAS;AAC5C,mCAAmC,mEAAS,wBAAwB;;AAEpE,aAAa,4DAAM;AACnB,yCAAyC,+DAAS,oCAAoC;;AAEtF,qCAAqC,6DAAO,qDAAqD;;AAEjG;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACpEmD;AACX;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,sEAAY;AACd,aAAa,4DAAM;AACnB,eAAe,mEAAS;;AAExB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACtCmD;AACX;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,sEAAY;AACd,kBAAkB,4DAAM;AACxB,eAAe,mEAAS;AACxB;AACA;;;;;;;;;;;;;;;;;AC3BmD;AACO;AACD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,sEAAY;AACd,eAAe,mEAAS;AACxB,SAAS,qEAAe;AACxB;;;;;;;;;;;;;;;;;AC3BmD;AACX;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,sEAAY;AACd,aAAa,4DAAM;AACnB,eAAe,mEAAS;;AAExB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AChEmD;AACO;AACD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,sEAAY;AACd,eAAe,mEAAS;AACxB,SAAS,qEAAe;AACxB;;;;;;;;;;;;;;;;AC1BwC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,sEAAY;AACd,iBAAiB,4DAAM;AACvB,kBAAkB,4DAAM;AACxB;;AAEA;AACA;AACA,IAAI;AACJ,cAAc,0BAA0B;AACxC,IAAI;AACJ;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEO;;;;;;;;;;;;;;;;;ACtLwF;AAC/C;AACS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,sEAAY;AACd,uBAAuB,gEAAU;AACjC,wBAAwB,gEAAU;AAClC,iDAAiD,yFAA+B;AAChF,mDAAmD,yFAA+B,mBAAmB;AACrG;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;AC7CwC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,sEAAY;AACd,iBAAiB,4DAAM;AACvB,kBAAkB,4DAAM;AACxB;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC/BwC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,sEAAY;AACd,iBAAiB,4DAAM;AACvB,kBAAkB,4DAAM;AACxB;AACA;;;;;;;;;;;;;;;;;AC7BwC;AACoC;AACnB,CAAC;AAC1D;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAI;AACJ,cAAc,0BAA0B;AACxC,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGe;AACf,EAAE,sEAAY;AACd,iBAAiB,4DAAM;AACvB,kBAAkB,4DAAM;AACxB;AACA,4BAA4B,8EAAwB;AACpD,4DAA4D;AAC5D;;AAEA;AACA,uDAAuD;;AAEvD;AACA;;;;;;;;;;;;;;;;;;AClF2D;AACiB;AACnB;AACY;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,sEAAY;AACd,aAAa,8EAAwB,wBAAwB,mEAAkB;AAC/E,SAAS,gFAAiB;AAC1B;;;;;;;;;;;;;;;;AChCwC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,sEAAY;AACd,SAAS,4DAAM,uBAAuB,4DAAM;AAC5C;;;;;;;;;;;;;;;;;;AC5B6D;AACe;AACnB;AACY;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,sEAAY;AACd,aAAa,8EAAwB,wBAAwB,qEAAoB;AACjF,SAAS,gFAAiB;AAC1B;;;;;;;;;;;;;;;;;;;ACxCwC;AACwC;AAChC;AACS;AACG;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,sEAAY;AACd,iBAAiB,4DAAM;AACvB,kBAAkB,4DAAM;AACxB,aAAa,gEAAU;AACvB,4BAA4B,gFAA0B;AACtD,cAAc;;AAEd;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA,gEAAgE;AAChE;;AAEA,6BAA6B,gEAAU,iCAAiC;;AAExE,QAAQ,sEAAgB,CAAC,4DAAM,wCAAwC,gEAAU;AACjF;AACA;;AAEA;AACA,IAAI;;;AAGJ;AACA;;;;;;;;;;;;;;;;;ACvD4E;AACnB;AACY;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,sEAAY;AACd,aAAa,8EAAwB;AACrC,SAAS,gFAAiB;AAC1B;;;;;;;;;;;;;;;;;;AChCwC;AACsC;AAC9B;AACS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,sEAAY;AACd,iBAAiB,4DAAM;AACvB,kBAAkB,4DAAM;AACxB,aAAa,gEAAU;AACvB,4BAA4B,+EAAyB,wBAAwB;AAC7E;;AAEA;AACA,+BAA+B;AAC/B;;AAEA,0BAA0B,gEAAU;AACpC,gEAAgE;;AAEhE;AACA;;;;;;;;;;;;;;;;ACvCwC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,sEAAY;AACd,aAAa,4DAAM;AACnB;AACA;AACA;;;;;;;;;;;;;;;;AC1BwC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,sEAAY;AACd,aAAa,4DAAM;AACnB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC5BgD;AACd;AAC0B;AACE;AACI;AACF;AACE;AACJ;AACtB;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACA,aAAa,UAAU;AACvB,YAAY,WAAW;AACvB,YAAY,YAAY;AACxB,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,WAAW;AACX;;AAEe;AACf,EAAE,sEAAY;AACd,cAAc,4DAAM;AACpB,YAAY,4DAAM;AAClB;AACA;AACA;AACA,4BAA4B,uEAAiB;AAC7C,aAAa,gEAAU;AACvB,wBAAwB,yDAAG;AAC3B;AACA,GAAG;AACH,6BAA6B,wEAAkB;AAC/C,sBAAsB,yDAAG;AACzB;AACA,GAAG;AACH,2BAA2B,sEAAgB;AAC3C,uBAAuB,yDAAG;AAC1B;AACA,GAAG;AACH,4BAA4B,uEAAiB;AAC7C,yBAAyB,yDAAG;AAC5B;AACA,GAAG;AACH,8BAA8B,yEAAmB;AACjD,yBAAyB,yDAAG;AAC5B;AACA,GAAG;AACH,8BAA8B,yEAAmB;AACjD;AACA;;;;;;;;;;;;;;;;;;AChEwC;AACI;AACI;AACS;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,SAAS;AACtB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,sEAAY;AACd,aAAa,4DAAM;AACnB,SAAS,8DAAQ,qBAAqB,gEAAU;AAChD;;;;;;;;;;;;;;;;;AC1BmD;AACX;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WA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","sources":["webpack://metal-pomodoro/./node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/_lib/requiredArgs/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/_lib/roundingMethods/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/_lib/toInteger/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/add/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/addDays/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/addMilliseconds/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/addMinutes/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/addMonths/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/addSeconds/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/compareAsc/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/constants/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/differenceInCalendarDays/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/differenceInCalendarMonths/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/differenceInCalendarYears/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/differenceInDays/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/differenceInHours/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/differenceInMilliseconds/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/differenceInMinutes/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/differenceInMonths/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/differenceInSeconds/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/differenceInYears/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/endOfDay/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/endOfMonth/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/intervalToDuration/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/isLastDayOfMonth/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/setMilliseconds/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/startOfDay/index.js","webpack://metal-pomodoro/./node_modules/date-fns/esm/toDate/index.js","webpack://metal-pomodoro/webpack/bootstrap","webpack://metal-pomodoro/webpack/runtime/define property getters","webpack://metal-pomodoro/webpack/runtime/hasOwnProperty shorthand","webpack://metal-pomodoro/webpack/runtime/make namespace object","webpack://metal-pomodoro/./src/index.ts"],"sourcesContent":["/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","var roundingMap = {\n  ceil: Math.ceil,\n  round: Math.round,\n  floor: Math.floor,\n  trunc: function trunc(value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  } // Math.trunc is not supported by IE\n\n};\nvar defaultRoundingMethod = 'trunc';\nexport function getRoundingMethod(method) {\n  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport addDays from \"../addDays/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n *\n * | Key            | Description                        |\n * |----------------|------------------------------------|\n * | years          | Amount of years to be added        |\n * | months         | Amount of months to be added       |\n * | weeks          | Amount of weeks to be added        |\n * | days           | Amount of days to be added         |\n * | hours          | Amount of hours to be added        |\n * | minutes        | Amount of minutes to be added      |\n * | seconds        | Amount of seconds to be added      |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\nexport default function add(dirtyDate, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || _typeof(duration) !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0; // Add years and months\n\n  var date = toDate(dirtyDate);\n  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date; // Add weeks and days\n\n  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths; // Add days, hours, minutes and seconds\n\n  var minutesToAdd = minutes + hours * 60;\n  var secondsToAdd = seconds + minutesToAdd * 60;\n  var msToAdd = secondsToAdd * 1000;\n  var finalDate = new Date(dateWithDays.getTime() + msToAdd);\n  return finalDate;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\n\nexport default function addMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addSeconds\n * @category Second Helpers\n * @summary Add the specified number of seconds to the given date.\n *\n * @description\n * Add the specified number of seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 seconds to 10 July 2014 12:45:00:\n * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:45:30\n */\n\nexport default function addSeconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * 1000);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInWeek = 7;\n/**\n * Days in 1 year\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n *\n * @name daysInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var daysInYear = 365.2425;\n/**\n * Maximum allowed time.\n *\n * @name maxTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInMinute = 60000;\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInHour = 3600000;\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInSecond = 1000;\n/**\n * Minimum allowed time.\n *\n * @name minTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minTime = -maxTime;\n/**\n * Minutes in 1 hour\n *\n * @name minutesInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minutesInHour = 60;\n/**\n * Months in 1 quarter\n *\n * @name monthsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInQuarter = 3;\n/**\n * Months in 1 year\n *\n * @name monthsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInYear = 12;\n/**\n * Quarters in 1 year\n *\n * @name quartersInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var quartersInYear = 4;\n/**\n * Seconds in 1 hour\n *\n * @name secondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInHour = 3600;\n/**\n * Seconds in 1 minute\n *\n * @name secondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMinute = 60;\n/**\n * Seconds in 1 day\n *\n * @name secondsInDay\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInDay = secondsInHour * 24;\n/**\n * Seconds in 1 week\n *\n * @name secondsInWeek\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInWeek = secondsInDay * 7;\n/**\n * Seconds in 1 year\n *\n * @name secondsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInYear = secondsInDay * daysInYear;\n/**\n * Seconds in 1 month\n *\n * @name secondsInMonth\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMonth = secondsInYear / 12;\n/**\n * Seconds in 1 quarter\n *\n * @name secondsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInQuarter = secondsInMonth * 3;","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() - dateRight.getFullYear();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\n\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days according to the local timezone\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n//=> 92\n */\n\n\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import { millisecondsInHour } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of hours\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\n\nexport default function differenceInHours(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dateLeft, dateRight) {\n  requiredArgs(2, arguments);\n  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();\n}","import { millisecondsInMinute } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of minutes\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\n\nexport default function differenceInMinutes(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarMonths from \"../differenceInCalendarMonths/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isLastDayOfMonth from \"../isLastDayOfMonth/index.js\";\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  var result; // Check for the difference of less than month\n\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      dateLeft.setDate(30);\n    }\n\n    dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n\n    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month\n\n    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n}","import differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarYears from \"../differenceInCalendarYears/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\n\nexport default function differenceInYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight)); // Set both dates to a valid leap year for accurate comparison when dealing\n  // with leap days\n\n  dateLeft.setFullYear(1584);\n  dateRight.setFullYear(1584); // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - Number(isLastYearNotFull)); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import compareAsc from \"../compareAsc/index.js\";\nimport add from \"../add/index.js\";\nimport differenceInDays from \"../differenceInDays/index.js\";\nimport differenceInHours from \"../differenceInHours/index.js\";\nimport differenceInMinutes from \"../differenceInMinutes/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport differenceInYears from \"../differenceInYears/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @param {Interval} interval - the interval to convert to duration\n *\n * @returns {Duration} The duration Object\n * @throws {TypeError} Requires 2 arguments\n * @throws {RangeError} `start` must not be Invalid Date\n * @throws {RangeError} `end` must not be Invalid Date\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\n\nexport default function intervalToDuration(interval) {\n  requiredArgs(1, arguments);\n  var start = toDate(interval.start);\n  var end = toDate(interval.end);\n  if (isNaN(start.getTime())) throw new RangeError('Start Date is invalid');\n  if (isNaN(end.getTime())) throw new RangeError('End Date is invalid');\n  var duration = {};\n  duration.years = Math.abs(differenceInYears(end, start));\n  var sign = compareAsc(end, start);\n  var remainingMonths = add(start, {\n    years: sign * duration.years\n  });\n  duration.months = Math.abs(differenceInMonths(end, remainingMonths));\n  var remainingDays = add(remainingMonths, {\n    months: sign * duration.months\n  });\n  duration.days = Math.abs(differenceInDays(end, remainingDays));\n  var remainingHours = add(remainingDays, {\n    days: sign * duration.days\n  });\n  duration.hours = Math.abs(differenceInHours(end, remainingHours));\n  var remainingMinutes = add(remainingHours, {\n    hours: sign * duration.hours\n  });\n  duration.minutes = Math.abs(differenceInMinutes(end, remainingMinutes));\n  var remainingSeconds = add(remainingMinutes, {\n    minutes: sign * duration.minutes\n  });\n  duration.seconds = Math.abs(differenceInSeconds(end, remainingSeconds));\n  return duration;\n}","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\n\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setMilliseconds\n * @category Millisecond Helpers\n * @summary Set the milliseconds to the given date.\n *\n * @description\n * Set the milliseconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} milliseconds - the milliseconds of the new date\n * @returns {Date} the new date with the milliseconds set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 300 milliseconds to 1 September 2014 11:30:40.500:\n * const result = setMilliseconds(new Date(2014, 8, 1, 11, 30, 40, 500), 300)\n * //=> Mon Sep 01 2014 11:30:40.300\n */\n\nexport default function setMilliseconds(dirtyDate, dirtyMilliseconds) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var milliseconds = toInteger(dirtyMilliseconds);\n  date.setMilliseconds(milliseconds);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { addMinutes, setMilliseconds, intervalToDuration, addSeconds, differenceInSeconds } from 'date-fns';\n\ndocument.addEventListener( 'DOMContentLoaded', function () {\n\tconst SECOND_IN_MILLISECONDS: number = 1000;\n\n\tconst PomodoroTimer = {\n\t\tsettings: {\n\t\t\tminutesLimit: 15,\n\t\t\tsecondsLimit: 0,\n\t\t\ttimer: null,\n\t\t},\n\t\tinit(): void {\n\t\t\tconst btn = document.getElementById( 'start' );\n\t\t\tconst mins = document.getElementById( 'minutes' );\n\t\t\tconst secs = document.getElementById( 'seconds' );\n\n\t\t\t// Type guard. Check if null or undefined. Abort if so.\n\t\t\tif ( ! btn || ! mins || ! secs ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst btnEl = btn as HTMLButtonElement;\n\t\t\tconst minsEl = mins as HTMLInputElement;\n\t\t\tconst secsEl = secs as HTMLInputElement;\n\n\t\t\tbtnEl.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tthis.toggleButton.bind( {\n\t\t\t\t\tcountdownStart: this.countdownStart.bind( this ),\n\t\t\t\t\tbtnEl,\n\t\t\t\t\tminsEl,\n\t\t\t\t\tsecsEl,\n\t\t\t\t\tsettings: this.settings,\n\t\t\t\t} )\n\t\t\t);\n\t\t\tminsEl.addEventListener( 'input', this.updateMins.bind( this ) );\n\t\t\tsecsEl.addEventListener( 'input', this.updateSecs.bind( this ) );\n\n\t\t\tconst settingsBtn = document.querySelector( '.settings' );\n\t\t\t// Type guard. Check if null or undefined. Abort if so.\n\t\t\tif ( ! settingsBtn ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst settingsBtnEl = settingsBtn as HTMLButtonElement;\n\t\t\tsettingsBtnEl.addEventListener(\n\t\t\t\t'click',\n\t\t\t\tthis.editTimer.bind( this )\n\t\t\t);\n\t\t},\n\t\tupdateMins( e ): void {\n\t\t\tconst next: HTMLInputElement = e.target;\n\t\t\tthis.settings.minutesLimit = parseInt( next.value );\n\t\t\tconsole.log( next.value );\n\t\t},\n\t\tupdateSecs( e ): void {\n\t\t\tconst next: HTMLInputElement = e.target;\n\t\t\tthis.settings.secondsLimit = parseInt( next.value );\n\t\t},\n\t\ttoggleButton(): void {\n\t\t\tlet btnText: string | undefined =\n\t\t\t\tthis.btnEl.innerText.toLowerCase();\n\n\t\t\tif ( 'start' === btnText ) {\n\t\t\t\tthis.countdownStart();\n\t\t\t\tthis.btnEl.innerText = 'stop';\n\t\t\t} else {\n\t\t\t\t// Stop countdown and reset values.\n\t\t\t\tclearInterval( this.settings.timer );\n\t\t\t\tthis.btnEl.innerText = 'start';\n\t\t\t\tthis.minsEl.value = this.settings.minutesLimit\n\t\t\t\t\t.toString()\n\t\t\t\t\t.padStart( 2, '0' );\n\t\t\t\tthis.secsEl.value = this.settings.secondsLimit\n\t\t\t\t\t.toString()\n\t\t\t\t\t.padStart( 2, '0' );\n\t\t\t}\n\t\t},\n\t\tcountdownStart: function (): void {\n\n\t\t\t\n\t\t\tlet currentTime = new Date();\n\t\t\tcurrentTime = setMilliseconds( currentTime, 0 );\n\t\t\tlet endTime = addMinutes(\n\t\t\t\tcurrentTime,\n\t\t\t\tthis.settings.minutesLimit\n\t\t\t);\n\t\t\tendTime = addSeconds(\n\t\t\t\tendTime,\n\t\t\t\tthis.settings.secondsLimit\n\t\t\t);\n\n\t\t\tconst remainder = differenceInSeconds(endTime, currentTime);\n\t\t\tconsole.log(remainder);\n\n\t\t\tconst circle = document.getElementById('circle');\n\t\t\t// Type guard.\n\t\t\tif ( ! circle ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst circleEl = circle as HTMLOrSVGElement;\n\t\t\tcircle.style.strokeDashoffset = '1596';\n\t\t\tcircle.style.animation = 'stroke ' + String(remainder) + 's linear forwards';\n\t\t\t/* These properties need to be set via JS on click */\n\t\t\t/* stroke-dashoffset: 1596; */\n\t\t\t/* animation: stroke 10s ease-out forwards; */\n\t\t\t\n\n\t\t\tconst mins = document.getElementById( 'minutes' );\n\t\t\tconst secs = document.getElementById( 'seconds' );\n\n\t\t\t// Type guard and current time check.\n\t\t\tif ( ! secs || ! mins ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst minsEl = mins as HTMLInputElement;\n\t\t\tconst secsEl = secs as HTMLInputElement;\n\n\t\t\tfunction timerCallback() {\n\t\t\t\tcurrentTime = new Date();\n\t\t\t\tcurrentTime = setMilliseconds( currentTime, 0 );\n\n\t\t\t\tlet remainingTime = intervalToDuration( {\n\t\t\t\t\tstart: currentTime,\n\t\t\t\t\tend: endTime,\n\t\t\t\t} );\n\n\t\t\t\tconst remainingMins = remainingTime.minutes as number;\n\t\t\t\tconst remainingSecs = remainingTime.seconds as number;\n\n\t\t\t\t// Render updated values.\n\t\t\t\tminsEl.value = remainingMins.toString().padStart( 2, '0' );\n\t\t\t\tsecsEl.value = remainingSecs.toString().padStart( 2, '0' );\n\n\t\t\t\tif ( ! remainingTime.minutes && ! remainingTime.seconds ) {\n\t\t\t\t\tclearInterval( this.settings.timer );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.settings.timer = setInterval(\n\t\t\t\ttimerCallback.bind( this ),\n\t\t\t\tSECOND_IN_MILLISECONDS\n\t\t\t);\n\t\t},\n\t\teditTimer: function () {\n\t\t\tconst mins = document.getElementById( 'minutes' );\n\t\t\tconst secs = document.getElementById( 'seconds' );\n\n\t\t\t// Type guard and current time check.\n\t\t\tif ( ! secs || ! mins ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst minsEl = mins as HTMLInputElement;\n\t\t\tconst secsEl = secs as HTMLInputElement;\n\n\t\t\tminsEl.removeAttribute( 'disabled' );\n\t\t\tsecsEl.removeAttribute( 'disabled' );\n\t\t},\n\t};\n\n\tPomodoroTimer.init();\n} );\n"],"names":["addMinutes","setMilliseconds","intervalToDuration","addSeconds","differenceInSeconds","document","addEventListener","SECOND_IN_MILLISECONDS","PomodoroTimer","settings","minutesLimit","secondsLimit","timer","init","btn","getElementById","mins","secs","btnEl","minsEl","secsEl","toggleButton","bind","countdownStart","updateMins","updateSecs","settingsBtn","querySelector","settingsBtnEl","editTimer","e","next","target","parseInt","value","console","log","btnText","innerText","toLowerCase","clearInterval","toString","padStart","currentTime","Date","endTime","remainder","circle","circleEl","style","strokeDashoffset","animation","String","timerCallback","remainingTime","start","end","remainingMins","minutes","remainingSecs","seconds","setInterval","removeAttribute"],"sourceRoot":""}