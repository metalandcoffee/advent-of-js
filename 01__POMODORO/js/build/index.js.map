{"version":3,"file":"index.js","mappings":";;;;;AAAAA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACzD,MAAMC,sBAA8B,GAAG,IAAI;EAE3C,MAAMC,aAAa,GAAG;IACrBC,QAAQ,EAAE;MACTC,YAAY,EAAE,EAAE;MAChBC,YAAY,EAAE;IACf,CAAC;IACDC,IAAI,EAAE,YAAkB;MACvBP,QAAQ,CAACC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACO,YAAY,CAAC;MACrD,IAAI,CAACC,cAAc,EAAE;IACtB,CAAC;IACDD,YAAY,EAAE,YAAkB;MAC/B,MAAME,GAAG,GAAGV,QAAQ,CAACW,cAAc,CAAC,OAAO,CAAC;MAC5C;MACA,IAAI,CAACD,GAAG,EAAE;QACT;MACD;;MAEA;MACA,MAAME,KAAK,GAAGF,GAAwB;MACtC,IAAIG,OAA2B,GAAGD,KAAK,CAACE,SAAS,CAACC,WAAW,EAAE;MAC/DH,KAAK,CAACE,SAAS,GAAG,OAAO,KAAKD,OAAO,GAAG,MAAM,GAAG,OAAO;IACzD,CAAC;IACDJ,cAAc,EAAE,YAAkB;MACjC;MACA;MACA;MACA;MACA;MACA,IAAIO,UAAU,GAAG,IAAI,CAACZ,QAAQ,CAACC,YAAY;MAC3C,IAAIY,UAAU,GAAG,IAAI,CAACb,QAAQ,CAACE,YAAY;MAE3C,SAASY,aAAa,GAAG;QACxB,MAAMC,IAAI,GAAGnB,QAAQ,CAACW,cAAc,CAAC,SAAS,CAAC;QAC/C,MAAMS,IAAI,GAAGpB,QAAQ,CAACW,cAAc,CAAC,SAAS,CAAC;QAC/C;QACA,IAAI,CAACS,IAAI,IAAI,CAACD,IAAI,EAAE;UACnB;QACD;QACA,MAAME,MAAM,GAAGF,IAAwB;QACvC,MAAMG,MAAM,GAAGF,IAAwB;QAEvCH,UAAU,GAAG,CAAC,KAAKA,UAAU,GAAG,EAAE,GAAG,EAAEA,UAAU;QACjD,IAAI,EAAE,KAAKA,UAAU,EAAE;UACtBA,UAAU,GAAG,CAAC,KAAKA,UAAU,GAAG,EAAE,GAAG,EAAEA,UAAU;QAClD;QAGAK,MAAM,CAACC,KAAK,GAAGN,UAAU,CAACO,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;QACrDJ,MAAM,CAACE,KAAK,GAAGP,UAAU,CAACQ,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;QACrDC,OAAO,CAACC,GAAG,CAAE,GAAEX,UAAU,CAACQ,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGR,UAAU,CAACO,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC,CAAC;MACnG;MAEA,MAAMG,KAAK,GAAGC,WAAW,CACxBX,aAAa,CAACY,IAAI,CAAC,IAAI,CAAC,EACxB5B,sBAAsB,CACtB;IACF;EACD,CAAC;EAEDC,aAAa,CAACI,IAAI,EAAE;AACrB,CAAC,CAAC,C","sources":["webpack://metal-pomodoro/./src/index.ts"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function () {\n\tconst SECOND_IN_MILLISECONDS: number = 1000;\n\n\tconst PomodoroTimer = {\n\t\tsettings: {\n\t\t\tminutesLimit: 15,\n\t\t\tsecondsLimit: 0,\n\t\t},\n\t\tinit: function (): void {\n\t\t\tdocument.addEventListener('click', this.toggleButton);\n\t\t\tthis.countdownStart();\n\t\t},\n\t\ttoggleButton: function (): void {\n\t\t\tconst btn = document.getElementById('start');\n\t\t\t// Type guard. Check if null or undefined. Abort if so.\n\t\t\tif (!btn) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Typecast as specific HTML element versus specifying the type.\n\t\t\tconst btnEl = btn as HTMLButtonElement;\n\t\t\tlet btnText: string | undefined = btnEl.innerText.toLowerCase();\n\t\t\tbtnEl.innerText = 'start' === btnText ? 'stop' : 'start';\n\t\t},\n\t\tcountdownStart: function (): void {\n\t\t\t// const currentTime: Date = new Date();\n\t\t\t// let expirationTime = addMinutes(currentTime, this.settings.minutesLimit);\n\t\t\t// expirationTime = addSeconds(expirationTime, this.settings.minutesLimit);\n\t\t\t// console.log(format(currentTime, 'hh:mm:ss'));\n\t\t\t// console.log(format(expirationTime, 'hh:mm:ss'));\n\t\t\tlet currentMin = this.settings.minutesLimit;\n\t\t\tlet currentSec = this.settings.secondsLimit;\n\n\t\t\tfunction timerCallback() {\n\t\t\t\tconst mins = document.getElementById('minutes');\n\t\t\t\tconst secs = document.getElementById('seconds');\n\t\t\t\t// Type guard.\n\t\t\t\tif (!secs || !mins) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst minsEl = mins as HTMLInputElement;\n\t\t\t\tconst secsEl = secs as HTMLInputElement;\n\n\t\t\t\tcurrentSec = 0 === currentSec ? 59 : --currentSec;\n\t\t\t\tif (59 === currentSec) {\n\t\t\t\t\tcurrentSec = 0 === currentSec ? 59 : --currentSec;\n\t\t\t\t}\n\n\n\t\t\t\tsecsEl.value = currentSec.toString().padStart(2, '0');\n\t\t\t\tminsEl.value = currentMin.toString().padStart(2, '0');\n\t\t\t\tconsole.log(`${currentMin.toString().padStart(2, '0')}:${currentSec.toString().padStart(2, '0')}`);\n\t\t\t}\n\n\t\t\tconst timer = setInterval(\n\t\t\t\ttimerCallback.bind(this),\n\t\t\t\tSECOND_IN_MILLISECONDS\n\t\t\t);\n\t\t}\n\t};\n\n\tPomodoroTimer.init();\n});\n"],"names":["document","addEventListener","SECOND_IN_MILLISECONDS","PomodoroTimer","settings","minutesLimit","secondsLimit","init","toggleButton","countdownStart","btn","getElementById","btnEl","btnText","innerText","toLowerCase","currentMin","currentSec","timerCallback","mins","secs","minsEl","secsEl","value","toString","padStart","console","log","timer","setInterval","bind"],"sourceRoot":""}